%{
open While
open System
open System.Text
open FSharp.Text.Lexing
open FSharp.Text.Parsing

let mutable ErrorContextDescriptor : string = ""
let parse_error_rich =
  Some (fun (ctxt: ParseErrorContext<_>) ->
        let nl = Environment.NewLine
        ErrorContextDescriptor <-
          (sprintf "CurrentToken: %A" ctxt.CurrentToken) + nl
          + (sprintf "Message: %s" ctxt.Message) + nl
          + (sprintf "ReduceTokens: %A" ctxt.ReduceTokens) + nl
          + (sprintf "ReducibleProductions: %A" ctxt.ReducibleProductions) + nl
          + (sprintf "ShiftTokens: %A" ctxt.ShiftTokens) + nl
          + (sprintf "StateStack: %A" ctxt.StateStack)
        )
%}


%token <string> ID
%token <int32> INT
%token WHILE DO OD BEGIN END IF THEN ELSE FI LPAREN RPAREN SEMI ASSIGN VAR READ WRITE EOF
%token PLUS MINUS
%token DIVIDE MULTIPLY
%token EQUALS NOTEQUALS LTEQ GTEQ LT GT
%start start
%type < While.Prog > start

%right SEMI
%nonassoc EQUALS NOTEQUALS LT GT LTEQ GTEQ
%left PLUS MINUS
%left MULTIPLY DIVIDE
%right UMINUS


%%

start: Prog { $1 }

Prog: Stmt EOF { $1 }

Expr: ID { Var $1 }
    | INT {  Int $1  }
    | LPAREN Expr RPAREN { $2 }
    | MINUS Expr %prec UMINUS { Uminus $2 }
    | Expr PLUS Expr      %prec PLUS     { BinOp (Plus,$1,$3) }
    | Expr MINUS Expr     %prec PLUS     { BinOp (Minus,$1,$3) }
    | Expr MULTIPLY Expr  %prec MULTIPLY { BinOp (Multiply,$1,$3) }
    | Expr DIVIDE Expr    %prec MULTIPLY { BinOp (Divide,$1,$3) }
    | Expr EQUALS Expr    %prec EQUALS   { BinOp (Equals,$1,$3) }
    | Expr NOTEQUALS Expr %prec EQUALS   { BinOp (NotEquals,$1,$3) }
    | Expr LT Expr        %prec EQUALS   { BinOp (Lt,$1,$3) }
    | Expr GT Expr        %prec EQUALS   { BinOp (Gt,$1,$3) }
    | Expr LTEQ Expr      %prec EQUALS   { BinOp (Lteq,$1,$3) }
    | Expr GTEQ Expr      %prec EQUALS   { BinOp (Gteq,$1,$3) }


Stmt: VAR ID { Decl($2) }
    | ID ASSIGN Expr { Assign($1,$3) }
    | BEGIN Stmt END { Scope $2 }
    | WHILE Expr DO Stmt { While($2,$4) }
    | Stmt SEMI Stmt { Seq($1,$3) }
    | IF Expr THEN Stmt FI { If($2,$4,None) }
    | IF Expr THEN Stmt ELSE Stmt FI { If($2,$4,Some $6) }
    | WRITE Expr { Write $2 }
    | READ ID { Read $2 }